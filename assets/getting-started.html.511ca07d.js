import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,c as d,b as n,a,w as c,F as u,d as e,e as t,o as b}from"./app.f5607559.js";const g={},h=n("p",null,"Let the Markdown file support flow chart in your VuePress site",-1),m=e("This plugin is using "),k={href:"https://github.com/adrai/flowchart.js",target:"_blank",rel:"noopener noreferrer"},w=e("flowchart.js"),f=e(" to support this feature."),A=n("h2",{id:"config",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#config","aria-hidden":"true"},"#"),e(" Config")],-1),E=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// .vuepress/config.ts"),e(`
`),n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" mdEnhance "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},'"vuepress-plugin-md-enhance"'),n("span",{class:"token punctuation"},";"),e(`

`),n("span",{class:"token keyword"},"export"),e(),n("span",{class:"token keyword"},"default"),e(),n("span",{class:"token punctuation"},"{"),e(`
  plugins`),n("span",{class:"token operator"},":"),e(),n("span",{class:"token punctuation"},"["),e(`
    `),n("span",{class:"token function"},"mdEnhance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),e(`
      `),n("span",{class:"token comment"},"// Enable flowchart"),e(`
      flowchart`),n("span",{class:"token operator"},":"),e(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),e(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),e(`
  `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),e(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),e(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br")])],-1),v=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// .vuepress/config.js"),e(`
`),n("span",{class:"token keyword"},"const"),e(),n("span",{class:"token punctuation"},"{"),e(" mdEnhance "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"vuepress-plugin-md-enhance"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`

module`),n("span",{class:"token punctuation"},"."),e("exports "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token literal-property property"},"plugins"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token punctuation"},"["),e(`
    `),n("span",{class:"token function"},"mdEnhance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),e(`
      `),n("span",{class:"token comment"},"// Enable flowchart"),e(`
      `),n("span",{class:"token literal-property property"},"flowchart"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),e(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),e(`
  `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),e(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),e(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br")])],-1),x=t(`<h2 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h2><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token comment">&lt;!-- \u2193 :preset is optional --&gt;</span>

<span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">flow:preset</span>
<span class="token code-block language-flow">
&lt;!-- Your flowchart code here. --&gt;
</span>
<span class="token punctuation">\`\`\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Available presets for now:</p><ul><li><code>vue</code> (default)</li><li><code>ant</code></li><li><code>pie</code></li></ul><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> Demo</h2>`,5),_=t(`<div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">flow</span>
<span class="token code-block language-flow">st=&gt;start: Start|past:&gt;http://www.google.com[blank]
e=&gt;end: End|future:&gt;http://www.google.com
op1=&gt;operation: My Operation|past
op2=&gt;operation: Stuff|current
sub1=&gt;subroutine: My Subroutine|invalid
cond=&gt;condition: Yes
or No?|approved:&gt;http://www.google.com
c2=&gt;condition: Good idea|rejected
io=&gt;inputoutput: catch something...|future

st-&gt;op1(right)-&gt;cond
cond(yes, right)-&gt;c2
cond(no)-&gt;sub1(left)-&gt;op1
c2(yes)-&gt;io-&gt;e
c2(no)-&gt;op2-&gt;e</span>
<span class="token punctuation">\`\`\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="flowchart-intro" tabindex="-1"><a class="header-anchor" href="#flowchart-intro" aria-hidden="true">#</a> Flowchart Intro</h2><h3 id="node-types" tabindex="-1"><a class="header-anchor" href="#node-types" aria-hidden="true">#</a> Node Types</h3><p>Defines the shape that the node will take.</p><h3 id="start-end" tabindex="-1"><a class="header-anchor" href="#start-end" aria-hidden="true">#</a> Start &amp; End</h3><p>Used as the first node where flows start from. Default text is <code>Start</code>.</p><ul><li><code>[Variable]-&gt;start: [Text]</code></li></ul><p>Used as the last node where a flow ends. Default text is <code>End</code>.</p><ul><li><code>[Variable]-&gt;end: [Text]</code></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">flow</span>
<span class="token code-block language-flow">st=&gt;start: Start
e=&gt;end: End

st-&gt;e</span>
<span class="token punctuation">\`\`\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,10),y=t('<h3 id="operation" tabindex="-1"><a class="header-anchor" href="#operation" aria-hidden="true">#</a> Operation</h3><p>Indicates that an operation needs to happen in the flow.</p><ul><li><code>[Variable]-&gt;operation: [Text]</code></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token code"><span class="token punctuation">```</span><span class="token code-language">flow</span>\n<span class="token code-block language-flow">process=&gt;operation: Operation\ne=&gt;end: End\n\nprocess-&gt;e</span>\n<span class="token punctuation">```</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',4),D=t('<h3 id="input-output" tabindex="-1"><a class="header-anchor" href="#input-output" aria-hidden="true">#</a> Input / Output</h3><p>Indicates that IO happens in a flow.</p><ul><li><code>[Variable]-&gt;inputoutput: [Text]</code></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token code"><span class="token punctuation">```</span><span class="token code-language">flow</span>\n<span class="token code-block language-flow">process=&gt;inputoutput: Inputoutput\ne=&gt;end: End\n\nprocess-&gt;e</span>\n<span class="token punctuation">```</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',4),C=t('<h3 id="subroutine" tabindex="-1"><a class="header-anchor" href="#subroutine" aria-hidden="true">#</a> Subroutine</h3><p>Indicates that a subroutine happens in the flow and that there should be another flowchart that documents this subroutine.</p><ul><li><code>[Variable]-&gt;subroutine: [Text]</code></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token code"><span class="token punctuation">```</span><span class="token code-language">flow</span>\n<span class="token code-block language-flow">process=&gt;subroutine: Subroutine\ne=&gt;end: End\n\nprocess-&gt;e</span>\n<span class="token punctuation">```</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',4),V=t(`<h3 id="condition" tabindex="-1"><a class="header-anchor" href="#condition" aria-hidden="true">#</a> Condition</h3><p>Allows for a conditional or logical statement to direct the flow into one of two or more paths.</p><ul><li><p><code>[Variable]-&gt;condition: [Text]</code></p></li><li><p><code>[Variable]([yesText])-&gt;[Position]</code></p></li><li><p><code>[Variable]([noText])-&gt;[Position]</code></p></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">flow</span>
<span class="token code-block language-flow">cond=&gt;condition: Process?
process=&gt;operation: Process
e=&gt;end: End

cond(yes)-&gt;process-&gt;e
cond(no)-&gt;e</span>
<span class="token punctuation">\`\`\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,4),q=t(`<h3 id="parallel" tabindex="-1"><a class="header-anchor" href="#parallel" aria-hidden="true">#</a> Parallel</h3><p>Allows for multiple flows to happen simultaneously.</p><ul><li><code>[Variable]-&gt;parallel: [Text]</code></li><li><code>[Variable](path1, direction)-&gt;[Position]</code></li><li><code>[Variable](path1, direction)-&gt;[Position]</code></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">flow</span>
<span class="token code-block language-flow">para=&gt;parallel: parallel tasks
process=&gt;operation: Process
e=&gt;end: End

para(path1, bottom)-&gt;process-&gt;e
para(path2)-&gt;e</span>
<span class="token punctuation">\`\`\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,4),S=t(`<h2 id="connections" tabindex="-1"><a class="header-anchor" href="#connections" aria-hidden="true">#</a> Connections</h2><p>Connections are defined in their own section below the node definitions.</p><p>The <code>-&gt;</code> operator specifies a connection from one node to another like <code>nodeVar1-&gt;nodeVar2-&gt;nodeVar3</code>.</p><p>Not all nodes need to be specified in one string and can be separaged like so</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>nodeVar1-&gt;nodeVar2
nodeVar2-&gt;nodeVar3
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Connection syntax is as follows:</p><p><code>&lt;node variable name&gt;[(&lt;specificaion1&gt;[, &lt;specification2])]-&gt;&lt;node variable name&gt;[[(&lt;specificaion1&gt;[, &lt;specification2])]-&gt;&lt;node variable name&gt;]</code></p><p>Items in <code>[]</code> are optional.</p><h3 id="directions" tabindex="-1"><a class="header-anchor" href="#directions" aria-hidden="true">#</a> Directions</h3><p>The following directions are available and define the direction the connection will leave the node from. If there are more than one specifiers, it is always the last. All nodes have a default direction making this an optional specification. <code>&lt;direction&gt;</code> will be used and one of the below list should be used in its place.</p><ul><li><code>left</code></li><li><code>right</code></li><li><code>top</code></li><li><code>bottom</code></li></ul><h3 id="node-specific-specifiers-by-type" tabindex="-1"><a class="header-anchor" href="#node-specific-specifiers-by-type" aria-hidden="true">#</a> Node Specific Specifiers by Type</h3><p>Each node variables has optional specifiers, like direction, and some have special specifiers depending on the node type that are defined below. Specifiers are added after the variable name in <code>()</code> and separated with <code>,</code> like <code>nodeVar(spec1, spec2)</code>.</p><ul><li><p><strong>start</strong><strong>operation</strong><strong>inputoutput</strong><strong>subroutine</strong></p><p>Optional direction</p><p><code>startVar(&lt;direction&gt;)-&gt;nextNode</code></p><p><code>operationVar(&lt;direction&gt;)-&gt;nextNode</code></p><p><code>inputoutputVar(&lt;direction&gt;)-&gt;nextNode</code></p><p><code>subroutineVar(&lt;direction&gt;)-&gt;nextNode</code></p></li><li><p><strong>condition</strong></p><p>Required logical specification of <code>yes</code> or <code>no</code></p><p>Optional direction</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>conditionalVar(yes, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>direction</span><span class="token punctuation">&gt;</span></span>)-&gt;nextNode1
conditionalVar(no, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>direction</span><span class="token punctuation">&gt;</span></span>)-&gt;nextNode2
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>parallel</strong></p><p>Required path specification of <code>path1</code>, <code>path2</code>, or <code>path3</code></p><p>Optional direction</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>parallelVar(path1, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>direction</span><span class="token punctuation">&gt;</span></span>)-&gt;nextNode1
parallelVar(path2, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>direction</span><span class="token punctuation">&gt;</span></span>)-&gt;nextNode2
parallelVar(path3, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>direction</span><span class="token punctuation">&gt;</span></span>)-&gt;nextNode3
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> Links</h3><p>A external link can be added to a node with the <code>:&gt;</code> operator.</p><p>The <code>st</code> node is linked with <code>http://www.google.com</code> and will open a new tab because <code>[blank]</code> is at the end of the URL.</p><p>The <code>e</code> node is linked with <code>http://www.yahoo.com</code> and will cause the page to navigate to that page instead of opening a new tab.</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>st=&gt;start: Start:&gt;http://www.google.com[blank]
e=&gt;end: End:&gt;http://www.yahoo.com
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="advice" tabindex="-1"><a class="header-anchor" href="#advice" aria-hidden="true">#</a> Advice</h2><p>Symbols that should possibly not be used in the text: <code>=&gt;</code> and <code>-&gt;</code> and <code>:&gt;</code> and <code>|</code> and <code>@&gt;</code> and <code>:$</code></p><p>To emphasize a specific path in your flowchart, you can define it like this:</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>st@&gt;op1({&quot;stroke&quot;:&quot;Red&quot;})@&gt;cond({&quot;stroke&quot;:&quot;Red&quot;,&quot;stroke-width&quot;:6,&quot;arrow-end&quot;:&quot;classic-wide-long&quot;})@&gt;c2({&quot;stroke&quot;:&quot;Red&quot;})@&gt;op2({&quot;stroke&quot;:&quot;Red&quot;})@&gt;e({&quot;stroke&quot;:&quot;Red&quot;})
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,23);function F(N,T){const r=o("ExternalLinkIcon"),i=o("CodeGroupItem"),p=o("CodeGroup"),s=o("FlowChart");return b(),d(u,null,[h,n("p",null,[m,n("a",k,[w,a(r)]),f]),A,a(p,null,{default:c(()=>[a(i,{title:"TS"},{default:c(()=>[E]),_:1}),a(i,{title:"JS"},{default:c(()=>[v]),_:1})]),_:1}),x,a(s,{id:"flowchart-382ee1a7",code:"st%3D%3Estart%3A%20Start%7Cpast%3A%3Ehttp%3A%2F%2Fwww.google.com%5Bblank%5D%0Ae%3D%3Eend%3A%20End%7Cfuture%3A%3Ehttp%3A%2F%2Fwww.google.com%0Aop1%3D%3Eoperation%3A%20My%20Operation%7Cpast%0Aop2%3D%3Eoperation%3A%20Stuff%7Ccurrent%0Asub1%3D%3Esubroutine%3A%20My%20Subroutine%7Cinvalid%0Acond%3D%3Econdition%3A%20Yes%0Aor%20No%3F%7Capproved%3A%3Ehttp%3A%2F%2Fwww.google.com%0Ac2%3D%3Econdition%3A%20Good%20idea%7Crejected%0Aio%3D%3Einputoutput%3A%20catch%20something...%7Cfuture%0A%0Ast-%3Eop1(right)-%3Econd%0Acond(yes%2C%20right)-%3Ec2%0Acond(no)-%3Esub1(left)-%3Eop1%0Ac2(yes)-%3Eio-%3Ee%0Ac2(no)-%3Eop2-%3Ee%0A",preset:"vue"}),a(s,{id:"flowchart-382ee1a8",code:"st%3D%3Estart%3A%20Start%7Cpast%3A%3Ehttp%3A%2F%2Fwww.google.com%5Bblank%5D%0Ae%3D%3Eend%3A%20End%7Cfuture%3A%3Ehttp%3A%2F%2Fwww.google.com%0Aop1%3D%3Eoperation%3A%20My%20Operation%7Cpast%0Aop2%3D%3Eoperation%3A%20Stuff%7Ccurrent%0Asub1%3D%3Esubroutine%3A%20My%20Subroutine%7Cinvalid%0Acond%3D%3Econdition%3A%20Yes%0Aor%20No%3F%7Capproved%3A%3Ehttp%3A%2F%2Fwww.google.com%0Ac2%3D%3Econdition%3A%20Good%20idea%7Crejected%0Aio%3D%3Einputoutput%3A%20catch%20something...%7Cfuture%0A%0Ast-%3Eop1(right)-%3Econd%0Acond(yes%2C%20right)-%3Ec2%0Acond(no)-%3Esub1(left)-%3Eop1%0Ac2(yes)-%3Eio-%3Ee%0Ac2(no)-%3Eop2-%3Ee%0A",preset:"ant"}),a(s,{id:"flowchart-382ee1a9",code:"st%3D%3Estart%3A%20Start%7Cpast%3A%3Ehttp%3A%2F%2Fwww.google.com%5Bblank%5D%0Ae%3D%3Eend%3A%20End%7Cfuture%3A%3Ehttp%3A%2F%2Fwww.google.com%0Aop1%3D%3Eoperation%3A%20My%20Operation%7Cpast%0Aop2%3D%3Eoperation%3A%20Stuff%7Ccurrent%0Asub1%3D%3Esubroutine%3A%20My%20Subroutine%7Cinvalid%0Acond%3D%3Econdition%3A%20Yes%0Aor%20No%3F%7Capproved%3A%3Ehttp%3A%2F%2Fwww.google.com%0Ac2%3D%3Econdition%3A%20Good%20idea%7Crejected%0Aio%3D%3Einputoutput%3A%20catch%20something...%7Cfuture%0A%0Ast-%3Eop1(right)-%3Econd%0Acond(yes%2C%20right)-%3Ec2%0Acond(no)-%3Esub1(left)-%3Eop1%0Ac2(yes)-%3Eio-%3Ee%0Ac2(no)-%3Eop2-%3Ee%0A",preset:"pie"}),_,a(s,{id:"flowchart-382ee220",code:"st%3D%3Estart%3A%20Start%0Ae%3D%3Eend%3A%20End%0A%0Ast-%3Ee%0A",preset:"vue"}),y,a(s,{id:"flowchart-382ee244",code:"process%3D%3Eoperation%3A%20Operation%0Ae%3D%3Eend%3A%20End%0A%0Aprocess-%3Ee%0A",preset:"vue"}),D,a(s,{id:"flowchart-64a570a8",code:"process%3D%3Einputoutput%3A%20Inputoutput%0Ae%3D%3Eend%3A%20End%0A%0Aprocess-%3Ee%0A",preset:"vue"}),C,a(s,{id:"flowchart-64a57060",code:"process%3D%3Esubroutine%3A%20Subroutine%0Ae%3D%3Eend%3A%20End%0A%0Aprocess-%3Ee%0A",preset:"vue"}),V,a(s,{id:"flowchart-64a56fb0",code:"cond%3D%3Econdition%3A%20Process%3F%0Aprocess%3D%3Eoperation%3A%20Process%0Ae%3D%3Eend%3A%20End%0A%0Acond(yes)-%3Eprocess-%3Ee%0Acond(no)-%3Ee%0A",preset:"vue"}),q,a(s,{id:"flowchart-64a56f2a",code:"para%3D%3Eparallel%3A%20parallel%20tasks%0Aprocess%3D%3Eoperation%3A%20Process%0Ae%3D%3Eend%3A%20End%0A%0Apara(path1%2C%20bottom)-%3Eprocess-%3Ee%0Apara(path2)-%3Ee%0A",preset:"vue"}),S],64)}var P=l(g,[["render",F],["__file","getting-started.html.vue"]]);export{P as default};
